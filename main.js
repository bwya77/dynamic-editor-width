/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  editorWidth: "20",
  editorWidthDefault: "20",
  showInStatusBar: true,
  controlStyle: "input"
};
var EditorWidthInput = class extends import_obsidian.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.pattern = /^(?:[0-9]{1,2}|100)$/;
    this.currentWidth = null;
    this.statusBarInput = null;
    this.statusBarItemEl = null;
    this.sliderValue = null;
  }
  async onload() {
    await this.loadSettings();
    if (this.settings.editorWidth === this.settings.editorWidthDefault) {
      this.settings.editorWidth = this.settings.editorWidthDefault;
      await this.saveSettings();
    }
    this.addBaseStyles();
    this.registerEvent(
      this.app.workspace.on("file-open", () => this.updateEditorClass())
    );
    if (this.settings.showInStatusBar) {
      this.createInput();
    }
    this.addSettingTab(new EditorWidthSettingTab(this.app, this));
  }
  onunload() {
    this.cleanUpResources();
  }
  createInput() {
    const inputContainer = document.createElement("div");
    inputContainer.style.cssText = `
            display: flex;
            align-items: center;
            height: 100%;
            padding: 0 8px;
        `;
    if (this.settings.controlStyle === "input") {
      this.createTextInput(inputContainer);
    } else {
      this.createSlider(inputContainer);
    }
    this.statusBarItemEl = this.addStatusBarItem();
    this.statusBarItemEl.appendChild(inputContainer);
  }
  createTextInput(container) {
    const input = document.createElement("input");
    this.statusBarInput = input;
    input.type = "text";
    input.value = this.settings.editorWidth;
    input.style.cssText = `
            width: 40px;
            height: 18px;
            text-align: center;
            border-radius: 4px;
            border: 1px solid var(--background-modifier-border);
            background: var(--background-secondary);
            color: rgb(96,147,227);
            padding: 1px 4px;
        `;
    input.addEventListener("keypress", (event) => {
      if (!/[0-9]/.test(event.key)) {
        event.preventDefault();
      }
    });
    input.addEventListener("blur", (event) => {
      this.handleInputChange(event.target.value, input);
    });
    input.addEventListener("keypress", (event) => {
      if (event.key === "Enter") {
        this.handleInputChange(event.target.value, input);
        input.blur();
      }
    });
    container.appendChild(input);
  }
  createSlider(container) {
    const valueDisplay = document.createElement("span");
    valueDisplay.style.cssText = `
            margin-right: 8px;
            color: rgb(96,147,227);
            min-width: 20px;
            text-align: right;
            font-size: 12px;
        `;
    valueDisplay.textContent = this.settings.editorWidth;
    container.appendChild(valueDisplay);
    const slider = document.createElement("input");
    this.statusBarInput = slider;
    slider.type = "range";
    slider.min = "0";
    slider.max = "100";
    slider.value = this.settings.editorWidth;
    slider.style.cssText = `
            width: 100px;
            margin: auto 0;
        `;
    slider.addEventListener("input", (event) => {
      const target = event.target;
      valueDisplay.textContent = target.value;
      this.handleInputChange(target.value, slider);
    });
    container.appendChild(slider);
  }
  removeInput() {
    if (this.statusBarItemEl) {
      this.statusBarItemEl.remove();
      this.statusBarItemEl = null;
      this.statusBarInput = null;
    }
  }
  toggleStatusBarDisplay(show) {
    if (show && !this.statusBarItemEl) {
      this.createInput();
    } else if (!show && this.statusBarItemEl) {
      this.removeInput();
    }
  }
  handleInputChange(value, input) {
    if (this.validateString(value)) {
      this.settings.editorWidth = value;
      this.settings.editorWidthDefault = value;
      this.saveSettings();
      this.updateEditorClass();
    } else {
      input.value = this.settings.editorWidth;
      new import_obsidian.Notice("Editor width must be a number from 0 to 100!");
    }
  }
  addBaseStyles() {
    const css = document.createElement("style");
    css.id = "editor-width-styles";
    let styles = "";
    for (let i = 0; i <= 100; i += 5) {
      styles += `
                .editor-width-${i} {
                    --file-line-width: calc(700px + ${i * 10}px) !important;
                }
            `;
    }
    css.textContent = styles;
    document.head.appendChild(css);
  }
  validateString(inputString) {
    return this.pattern.test(inputString);
  }
  updateEditorClass() {
    var _a;
    const file = this.app.workspace.getActiveFile();
    if (!file)
      return;
    const metadata = this.app.metadataCache.getFileCache(file);
    let width = (_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a["editor-width"];
    if (!width || !this.validateString(width)) {
      width = this.settings.editorWidthDefault;
    }
    this.settings.editorWidth = width;
    this.saveSettings();
    if (this.statusBarInput) {
      this.statusBarInput.value = width;
      if (this.settings.controlStyle === "slider") {
        const valueDisplay = this.statusBarInput.previousSibling;
        if (valueDisplay) {
          valueDisplay.textContent = width;
        }
      }
    }
    const roundedWidth = Math.round(parseInt(width) / 5) * 5;
    if (this.currentWidth !== roundedWidth) {
      if (this.currentWidth !== null) {
        document.body.classList.remove(`editor-width-${this.currentWidth}`);
      }
      document.body.classList.add(`editor-width-${roundedWidth}`);
      this.currentWidth = roundedWidth;
    }
  }
  cleanUpResources() {
    const styleElement = document.getElementById("editor-width-styles");
    if (styleElement) {
      styleElement.remove();
    }
    if (this.currentWidth !== null) {
      document.body.classList.remove(`editor-width-${this.currentWidth}`);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var EditorWidthSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Default Editor Width").setDesc("Set the default editor width value. This will be used for all notes unless overridden by frontmatter.").addText((text) => text.setPlaceholder("20").setValue(this.plugin.settings.editorWidthDefault).onChange(async (value) => {
      var _a;
      if (this.plugin.validateString(value)) {
        this.plugin.settings.editorWidthDefault = value;
        const file = this.plugin.app.workspace.getActiveFile();
        if (file) {
          const metadata = this.plugin.app.metadataCache.getFileCache(file);
          if (!((_a = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _a["editor-width"])) {
            this.plugin.settings.editorWidth = value;
            this.plugin.updateEditorClass();
          }
        }
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName("Show Width Control in Status Bar").setDesc("Toggle visibility of the width control input in the status bar.").addToggle((toggle) => toggle.setValue(this.plugin.settings.showInStatusBar).onChange(async (value) => {
      this.plugin.settings.showInStatusBar = value;
      this.plugin.toggleStatusBarDisplay(value);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Control Style").setDesc("Choose between a text input or slider control in the status bar.").addDropdown((dropdown) => dropdown.addOption("input", "Input Box").addOption("slider", "Slider").setValue(this.plugin.settings.controlStyle).onChange(async (value) => {
      this.plugin.settings.controlStyle = value;
      if (this.plugin.settings.showInStatusBar) {
        this.plugin.removeInput();
        this.plugin.createInput();
      }
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Note:").setDesc(`To override the default width for a specific note, add "editor-width: [value]" to that note's YAML frontmatter.`);
  }
};
var main_default = EditorWidthInput;
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgQXBwLCBOb3RpY2UsIFNldHRpbmcgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuaW50ZXJmYWNlIFBsdWdpblNldHRpbmdzIHtcbiAgICBlZGl0b3JXaWR0aDogc3RyaW5nO1xuICAgIGVkaXRvcldpZHRoRGVmYXVsdDogc3RyaW5nO1xuICAgIHNob3dJblN0YXR1c0JhcjogYm9vbGVhbjtcbiAgICBjb250cm9sU3R5bGU6IHN0cmluZztcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogUGx1Z2luU2V0dGluZ3MgPSB7XG4gICAgZWRpdG9yV2lkdGg6IFwiMjBcIixcbiAgICBlZGl0b3JXaWR0aERlZmF1bHQ6IFwiMjBcIixcbiAgICBzaG93SW5TdGF0dXNCYXI6IHRydWUsXG4gICAgY29udHJvbFN0eWxlOiBcImlucHV0XCJcbn07XG5cbmNsYXNzIEVkaXRvcldpZHRoSW5wdXQgZXh0ZW5kcyBQbHVnaW4ge1xuICAgIHNldHRpbmdzOiBQbHVnaW5TZXR0aW5ncztcbiAgICBwYXR0ZXJuOiBSZWdFeHA7XG4gICAgY3VycmVudFdpZHRoOiBudW1iZXIgfCBudWxsO1xuICAgIHN0YXR1c0JhcklucHV0OiBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbDtcbiAgICBzdGF0dXNCYXJJdGVtRWw6IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICBzbGlkZXJWYWx1ZTogSFRNTFNwYW5FbGVtZW50IHwgbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBtYW5pZmVzdDogYW55KSB7XG4gICAgc3VwZXIoYXBwLCBtYW5pZmVzdCk7XG4gICAgdGhpcy5wYXR0ZXJuID0gL14oPzpbMC05XXsxLDJ9fDEwMCkkLztcbiAgICB0aGlzLmN1cnJlbnRXaWR0aCA9IG51bGw7XG4gICAgdGhpcy5zdGF0dXNCYXJJbnB1dCA9IG51bGw7XG4gICAgdGhpcy5zdGF0dXNCYXJJdGVtRWwgPSBudWxsO1xuICAgIHRoaXMuc2xpZGVyVmFsdWUgPSBudWxsO1xufVxuXG4gICAgYXN5bmMgb25sb2FkKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZWRpdG9yV2lkdGggPT09IHRoaXMuc2V0dGluZ3MuZWRpdG9yV2lkdGhEZWZhdWx0KSB7XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmVkaXRvcldpZHRoID0gdGhpcy5zZXR0aW5ncy5lZGl0b3JXaWR0aERlZmF1bHQ7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLmFkZEJhc2VTdHlsZXMoKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5vbihcImZpbGUtb3BlblwiLCAoKSA9PiB0aGlzLnVwZGF0ZUVkaXRvckNsYXNzKCkpXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zaG93SW5TdGF0dXNCYXIpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlSW5wdXQoKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBFZGl0b3JXaWR0aFNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcbiAgICB9XG5cbiAgICBvbnVubG9hZCgpIHtcbiAgICAgICAgdGhpcy5jbGVhblVwUmVzb3VyY2VzKCk7XG4gICAgfVxuXG4gICAgY3JlYXRlSW5wdXQoKSB7XG4gICAgICAgIGNvbnN0IGlucHV0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgaW5wdXRDb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgcGFkZGluZzogMCA4cHg7XG4gICAgICAgIGA7XG5cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuY29udHJvbFN0eWxlID09PSBcImlucHV0XCIpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlVGV4dElucHV0KGlucHV0Q29udGFpbmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlU2xpZGVyKGlucHV0Q29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhdHVzQmFySXRlbUVsID0gdGhpcy5hZGRTdGF0dXNCYXJJdGVtKCk7XG4gICAgICAgIHRoaXMuc3RhdHVzQmFySXRlbUVsLmFwcGVuZENoaWxkKGlucHV0Q29udGFpbmVyKTtcbiAgICB9XG5cbiAgICBjcmVhdGVUZXh0SW5wdXQoY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgdGhpcy5zdGF0dXNCYXJJbnB1dCA9IGlucHV0O1xuICAgICAgICBpbnB1dC50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICAgIGlucHV0LnZhbHVlID0gdGhpcy5zZXR0aW5ncy5lZGl0b3JXaWR0aDtcbiAgICAgICAgaW5wdXQuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgICAgICAgIHdpZHRoOiA0MHB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAxOHB4O1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1zZWNvbmRhcnkpO1xuICAgICAgICAgICAgY29sb3I6IHJnYig5NiwxNDcsMjI3KTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDFweCA0cHg7XG4gICAgICAgIGA7XG5cbiAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKCEvWzAtOV0vLnRlc3QoZXZlbnQua2V5KSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVJbnB1dENoYW5nZSgoZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlLCBpbnB1dCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlwcmVzc1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2UoKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSwgaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlucHV0LmJsdXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGlucHV0KTtcbiAgICB9XG5cbiAgICBjcmVhdGVTbGlkZXIoY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBjb25zdCB2YWx1ZURpc3BsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgdmFsdWVEaXNwbGF5LnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICAgICAgICAgIGNvbG9yOiByZ2IoOTYsMTQ3LDIyNyk7XG4gICAgICAgICAgICBtaW4td2lkdGg6IDIwcHg7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgYDtcbiAgICAgICAgdmFsdWVEaXNwbGF5LnRleHRDb250ZW50ID0gdGhpcy5zZXR0aW5ncy5lZGl0b3JXaWR0aDtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHZhbHVlRGlzcGxheSk7XG5cbiAgICAgICAgY29uc3Qgc2xpZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICB0aGlzLnN0YXR1c0JhcklucHV0ID0gc2xpZGVyO1xuICAgICAgICBzbGlkZXIudHlwZSA9IFwicmFuZ2VcIjtcbiAgICAgICAgc2xpZGVyLm1pbiA9IFwiMFwiO1xuICAgICAgICBzbGlkZXIubWF4ID0gXCIxMDBcIjtcbiAgICAgICAgc2xpZGVyLnZhbHVlID0gdGhpcy5zZXR0aW5ncy5lZGl0b3JXaWR0aDtcbiAgICAgICAgc2xpZGVyLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgICAgICB3aWR0aDogMTAwcHg7XG4gICAgICAgICAgICBtYXJnaW46IGF1dG8gMDtcbiAgICAgICAgYDtcblxuICAgICAgICBzbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgICAgICB2YWx1ZURpc3BsYXkudGV4dENvbnRlbnQgPSB0YXJnZXQudmFsdWU7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlKHRhcmdldC52YWx1ZSwgc2xpZGVyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHNsaWRlcik7XG4gICAgfVxuXG4gICAgcmVtb3ZlSW5wdXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXR1c0Jhckl0ZW1FbCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0dXNCYXJJdGVtRWwucmVtb3ZlKCk7XG4gICAgICAgICAgICB0aGlzLnN0YXR1c0Jhckl0ZW1FbCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnN0YXR1c0JhcklucHV0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvZ2dsZVN0YXR1c0JhckRpc3BsYXkoc2hvdzogYm9vbGVhbikge1xuICAgICAgICBpZiAoc2hvdyAmJiAhdGhpcy5zdGF0dXNCYXJJdGVtRWwpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlSW5wdXQoKTtcbiAgICAgICAgfSBlbHNlIGlmICghc2hvdyAmJiB0aGlzLnN0YXR1c0Jhckl0ZW1FbCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVJbnB1dCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlSW5wdXRDaGFuZ2UodmFsdWU6IHN0cmluZywgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsaWRhdGVTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmVkaXRvcldpZHRoID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmVkaXRvcldpZHRoRGVmYXVsdCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWRpdG9yQ2xhc3MoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0LnZhbHVlID0gdGhpcy5zZXR0aW5ncy5lZGl0b3JXaWR0aDtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJFZGl0b3Igd2lkdGggbXVzdCBiZSBhIG51bWJlciBmcm9tIDAgdG8gMTAwIVwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZEJhc2VTdHlsZXMoKSB7XG4gICAgICAgIGNvbnN0IGNzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgY3NzLmlkID0gXCJlZGl0b3Itd2lkdGgtc3R5bGVzXCI7XG4gICAgICAgIFxuICAgICAgICBsZXQgc3R5bGVzID0gJyc7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IDEwMDsgaSArPSA1KSB7XG4gICAgICAgICAgICBzdHlsZXMgKz0gYFxuICAgICAgICAgICAgICAgIC5lZGl0b3Itd2lkdGgtJHtpfSB7XG4gICAgICAgICAgICAgICAgICAgIC0tZmlsZS1saW5lLXdpZHRoOiBjYWxjKDcwMHB4ICsgJHtpICogMTB9cHgpICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY3NzLnRleHRDb250ZW50ID0gc3R5bGVzO1xuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGNzcyk7XG4gICAgfVxuXG4gICAgdmFsaWRhdGVTdHJpbmcoaW5wdXRTdHJpbmc6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXR0ZXJuLnRlc3QoaW5wdXRTdHJpbmcpO1xuICAgIH1cblxuICAgIHVwZGF0ZUVkaXRvckNsYXNzKCkge1xuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgaWYgKCFmaWxlKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgXG4gICAgICAgIGxldCB3aWR0aCA9IG1ldGFkYXRhPy5mcm9udG1hdHRlcj8uW1wiZWRpdG9yLXdpZHRoXCJdO1xuICAgICAgICBcbiAgICAgICAgaWYgKCF3aWR0aCB8fCAhdGhpcy52YWxpZGF0ZVN0cmluZyh3aWR0aCkpIHtcbiAgICAgICAgICAgIHdpZHRoID0gdGhpcy5zZXR0aW5ncy5lZGl0b3JXaWR0aERlZmF1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldHRpbmdzLmVkaXRvcldpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuc2F2ZVNldHRpbmdzKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzQmFySW5wdXQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzQmFySW5wdXQudmFsdWUgPSB3aWR0aDtcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmNvbnRyb2xTdHlsZSA9PT0gXCJzbGlkZXJcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGlzcGxheSA9IHRoaXMuc3RhdHVzQmFySW5wdXQucHJldmlvdXNTaWJsaW5nIGFzIEhUTUxTcGFuRWxlbWVudDtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVEaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlRGlzcGxheS50ZXh0Q29udGVudCA9IHdpZHRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJvdW5kZWRXaWR0aCA9IE1hdGgucm91bmQocGFyc2VJbnQod2lkdGgpIC8gNSkgKiA1O1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFdpZHRoICE9PSByb3VuZGVkV2lkdGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRXaWR0aCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShgZWRpdG9yLXdpZHRoLSR7dGhpcy5jdXJyZW50V2lkdGh9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChgZWRpdG9yLXdpZHRoLSR7cm91bmRlZFdpZHRofWApO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50V2lkdGggPSByb3VuZGVkV2lkdGg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhblVwUmVzb3VyY2VzKCkge1xuICAgICAgICBjb25zdCBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVkaXRvci13aWR0aC1zdHlsZXNcIik7XG4gICAgICAgIGlmIChzdHlsZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jdXJyZW50V2lkdGggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShgZWRpdG9yLXdpZHRoLSR7dGhpcy5jdXJyZW50V2lkdGh9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcbiAgICB9XG59XG5cbmNsYXNzIEVkaXRvcldpZHRoU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICAgIHBsdWdpbjogRWRpdG9yV2lkdGhJbnB1dDtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IEVkaXRvcldpZHRoSW5wdXQpIHtcbiAgICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICB9XG5cbiAgICBkaXNwbGF5KCkge1xuICAgICAgICBjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJEZWZhdWx0IEVkaXRvciBXaWR0aFwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJTZXQgdGhlIGRlZmF1bHQgZWRpdG9yIHdpZHRoIHZhbHVlLiBUaGlzIHdpbGwgYmUgdXNlZCBmb3IgYWxsIG5vdGVzIHVubGVzcyBvdmVycmlkZGVuIGJ5IGZyb250bWF0dGVyLlwiKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiMjBcIilcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZWRpdG9yV2lkdGhEZWZhdWx0KVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICBpZiAodGhpcy5wbHVnaW4udmFsaWRhdGVTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmVkaXRvcldpZHRoRGVmYXVsdCA9IHZhbHVlO1xuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgIGlmIChmaWxlKSB7ICAvLyBBZGQgdGhpcyBudWxsIGNoZWNrXG4gICAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMucGx1Z2luLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgICAgIGlmICghbWV0YWRhdGE/LmZyb250bWF0dGVyPy5bXCJlZGl0b3Itd2lkdGhcIl0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lZGl0b3JXaWR0aCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnVwZGF0ZUVkaXRvckNsYXNzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgfVxufSkpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJTaG93IFdpZHRoIENvbnRyb2wgaW4gU3RhdHVzIEJhclwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJUb2dnbGUgdmlzaWJpbGl0eSBvZiB0aGUgd2lkdGggY29udHJvbCBpbnB1dCBpbiB0aGUgc3RhdHVzIGJhci5cIilcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93SW5TdGF0dXNCYXIpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93SW5TdGF0dXNCYXIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4udG9nZ2xlU3RhdHVzQmFyRGlzcGxheSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiQ29udHJvbCBTdHlsZVwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJDaG9vc2UgYmV0d2VlbiBhIHRleHQgaW5wdXQgb3Igc2xpZGVyIGNvbnRyb2wgaW4gdGhlIHN0YXR1cyBiYXIuXCIpXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4gZHJvcGRvd25cbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiaW5wdXRcIiwgXCJJbnB1dCBCb3hcIilcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwic2xpZGVyXCIsIFwiU2xpZGVyXCIpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbnRyb2xTdHlsZSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbnRyb2xTdHlsZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0luU3RhdHVzQmFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5yZW1vdmVJbnB1dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uY3JlYXRlSW5wdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIk5vdGU6XCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhgVG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgd2lkdGggZm9yIGEgc3BlY2lmaWMgbm90ZSwgYWRkIFwiZWRpdG9yLXdpZHRoOiBbdmFsdWVdXCIgdG8gdGhhdCBub3RlJ3MgWUFNTCBmcm9udG1hdHRlci5gKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVkaXRvcldpZHRoSW5wdXQ7Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQSxzQkFBK0Q7QUFTL0QsSUFBTSxtQkFBbUM7QUFBQSxFQUNyQyxhQUFhO0FBQUEsRUFDYixvQkFBb0I7QUFBQSxFQUNwQixpQkFBaUI7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
